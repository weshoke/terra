#!../build/LuaJIT-2.0.1/src/luajit
local ffi = require("ffi")

local lscmd
if ffi.os == "Windows" then
    lscmd = "cmd /c dir /b /s"
else
    lscmd = "find . | cut -c 3-"
end

local function getcommand(file)
    local h = io.open(file, "r")
    local line = h:read()
    io.close(h)
    local prefix = "../terra"
    if line and string.sub(line,1,1) == "#" then
        prefix = line:match("^#!(.+)$")
    end
    if ffi.os == "Windows" then
        prefix = "cmd /c " .. prefix:gsub("/","\\\\")
    end
    return prefix
end



local passed = {}
local failed = {}

for line in io.popen(lscmd):lines() do
    if ffi.os == "Windows" then
        local cwd = io.popen("cmd /c echo %cd%"):read()
        line = line:sub(cwd:len()+2)
        line = line:gsub("\\","/")
    end
    local file = line:match("^([^/]*%.t)$") or line:match("^(fails/[^/]*%.t)$")
    if file then
        print(file .. ":")
        local execstring = getcommand(file) .. " " .. file
        --things in the fail directory should cause terra compiler errors
        --we dont check for the particular error
        --but we do check to see that the "Errors reported.." message prints
        --which suggests that the error was reported gracefully
        --(if the compiler bites it before it finishes typechecking then it will not print this)
        local success
        if file:find("fails") then
            success = os.execute(execstring.." | grep 'Errors reported during'") == 0 
        else
            success = os.execute(execstring) == 0
        end
        if success then
            table.insert(passed,file)
        else
            table.insert(failed,file)
        end
    end
end


local function printtests(nm,lst)
    if #lst > 0 then
        print("=================")
        print("= "..nm)
        print("=================")
        for i,e in ipairs(lst) do
            print(e)
        end
        print("=================")
        print()
    end
end
printtests("passing tests",passed)
printtests("FAILING tests",failed)
print(tostring(#passed).." tests passed. "..tostring(#failed).." tests failed.")